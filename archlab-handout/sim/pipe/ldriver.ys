#######################################################################
# Test for copying block of size 63;
#######################################################################
	.pos 0
main:	irmovq Stack, %rsp  	# Set up stack pointer

	# Set up arguments for copy function and then invoke it
	irmovq $63, %rdx		# src and dst have 63 elements
	irmovq dest, %rsi	# dst array
	irmovq src, %rdi	# src array
	call ncopy		 
	halt			# should halt with num nonzeros in %rax
StartFun:
#/* $begin ncopy-ys */
##################################################################
# ncopy.ys - Copy a src block of len words to dst.
# Return the number of positive words (>0) contained in src.
#
#
#
##################################################################
# Do not modify this portion
# Function prologue.
# %rdi = src, %rsi = dst, %rdx = len
ncopy:
##################################################################
# You can modify this portion
# Loop header
	xorq %rax, %rax
    iaddq $-9, %rdx
Loop:
    jge L1
	jl Rem
L1:
    mrmovq (%rdi), %r10
    mrmovq $8(%rdi), %r11
	andq %r10, %r10
    rmmovq %r10, (%rsi)
    jle L2
    iaddq $1, %rax
L2:
    mrmovq $16(%rdi), %r10
	andq %r11, %r11
    rmmovq %r11, $8(%rsi)
    jle L3
    iaddq $1, %rax
L3:
    mrmovq $24(%rdi), %r11
	andq %r10, %r10
    rmmovq %r10, $16(%rsi)
    jle L4
    iaddq $1, %rax
L4:
    mrmovq $32(%rdi), %r10
	andq %r11, %r11
    rmmovq %r11, $24(%rsi)
    jle L5
    iaddq $1, %rax
L5:
    mrmovq $40(%rdi), %r11
	andq %r10, %r10
    rmmovq %r10, $32(%rsi)
    jle L6
    iaddq $1, %rax
L6:
    mrmovq $48(%rdi), %r10
	andq %r11, %r11
    rmmovq %r11, $40(%rsi)
    jle L7
    iaddq $1, %rax
L7:
    mrmovq $56(%rdi), %r11
	andq %r10, %r10
    rmmovq %r10, $48(%rsi)
    jle L8
    iaddq $1, %rax
L8:
	mrmovq $64(%rdi), %r10
	andq %r11, %r11
	rmmovq %r11, $56(%rsi)
	jle L9
	iaddq $1, %rax
L9:
	andq %r10, %r10
    rmmovq %r10, $64(%rsi)
    jle Update
    iaddq $1, %rax

Update:
    iaddq $72, %rdi
    iaddq $72, %rsi
	iaddq $-9, %rdx
    jge Loop

Rem:
    iaddq $8, %rdx
    jge Re1
	jl Done

Re1:
    mrmovq (%rdi), %r10
    mrmovq $8(%rdi), %r11
	andq %r10, %r10
    rmmovq %r10, (%rsi)
    jle Ch1
    iaddq $1, %rax
Ch1:
    iaddq $-1, %rdx
    jge Re2
    jmp Done
Re2:
    mrmovq $16(%rdi), %r10
	andq %r11, %r11
    rmmovq %r11, $8(%rsi)
    jle Ch2
    iaddq $1, %rax
Ch2:
    iaddq $-1, %rdx
    jge Re3
    jmp Done
Re3:
    mrmovq $24(%rdi), %r11
	andq %r10, %r10
    rmmovq %r10, $16(%rsi)
    jle Ch3
    iaddq $1, %rax
Ch3:
    iaddq $-1, %rdx
    jge Re4
    jmp Done
Re4:
    mrmovq $32(%rdi), %r10
	andq %r11, %r11
    rmmovq %r11, $24(%rsi)
    jle Ch4
    iaddq $1, %rax
Ch4:
    iaddq $-1, %rdx
    jge Re5
    jmp Done
Re5:
    mrmovq $40(%rdi), %r11
	andq %r10, %r10
    rmmovq %r10, $32(%rsi)
    jle Ch5
    iaddq $1, %rax
Ch5:
    iaddq $-1, %rdx
    jge Re6
    jmp Done
Re6:
    mrmovq $48(%rdi), %r10
	andq %r11, %r11
    rmmovq %r11, $40(%rsi)
    jle Ch6
    iaddq $1, %rax
Ch6:
    iaddq $-1, %rdx
    jge Re7
    jmp Done
Re7:
	mrmovq $56(%rdi), %r11
	andq %r10, %r10
    rmmovq %r10, $48(%rsi)
    jle Ch7
    iaddq $1, %rax
Ch7:
	iaddq $-1, %rdx
	jge Re8
	jmp Done
Re8:
	andq %r11, %r11
	rmmovq %r11, $56(%rsi)
	jle Done
	iaddq $1, %rax

##################################################################
# Do not modify the following section of code
# Function epilogue.
Done:
  ret
##################################################################
# Keep the following label at the end of your function
End:
#/* $end ncopy-ys */
EndFun:

###############################
# Source and destination blocks 
###############################
	.align 8
src:
	.quad -1
	.quad 2
	.quad -3
	.quad -4
	.quad 5
	.quad -6
	.quad -7
	.quad -8
	.quad -9
	.quad 10
	.quad -11
	.quad -12
	.quad -13
	.quad 14
	.quad -15
	.quad -16
	.quad -17
	.quad 18
	.quad 19
	.quad 20
	.quad 21
	.quad -22
	.quad -23
	.quad 24
	.quad -25
	.quad 26
	.quad 27
	.quad 28
	.quad 29
	.quad 30
	.quad -31
	.quad 32
	.quad 33
	.quad -34
	.quad -35
	.quad -36
	.quad -37
	.quad 38
	.quad 39
	.quad 40
	.quad -41
	.quad -42
	.quad -43
	.quad -44
	.quad -45
	.quad -46
	.quad -47
	.quad -48
	.quad 49
	.quad -50
	.quad 51
	.quad -52
	.quad -53
	.quad 54
	.quad 55
	.quad 56
	.quad 57
	.quad 58
	.quad 59
	.quad 60
	.quad 61
	.quad 62
	.quad 63
	.quad 0xbcdefa # This shouldn't get moved

	.align 16
Predest:
	.quad 0xbcdefa
dest:
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
Postdest:
	.quad 0xdefabc

.align 8
# Run time stack
	.quad 0
	.quad 0
	.quad 0
	.quad 0
	.quad 0
	.quad 0
	.quad 0
	.quad 0
	.quad 0
	.quad 0
	.quad 0
	.quad 0
	.quad 0
	.quad 0
	.quad 0
	.quad 0

Stack:
