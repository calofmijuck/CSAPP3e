                            | #######################################################################
                            | # Test for copying block of size 2;
                            | #######################################################################
0x000:                      | 	.pos 0
0x000: 30f43004000000000000 | main:	irmovq Stack, %rsp  	# Set up stack pointer
                            | 
                            | 	# Set up arguments for copy function and then invoke it
0x00a: 30f20200000000000000 | 	irmovq $2, %rdx		# src and dst have 2 elements
0x014: 30f69803000000000000 | 	irmovq dest, %rsi	# dst array
0x01e: 30f77803000000000000 | 	irmovq src, %rdi	# src array
0x028: 803b00000000000000   | 	call ncopy		 
0x031: 800e02000000000000   | 	call check	        # Call checker code
0x03a: 00                   | 	halt                    # should halt with 0xaaaa in %rax
0x03b:                      | StartFun:
                            | #/* $begin ncopy-ys */
                            | ##################################################################
                            | # ncopy.ys - Copy a src block of len words to dst.
                            | # Return the number of positive words (>0) contained in src.
                            | #
                            | # Include your name and ID here.
                            | #
                            | # Insert iaddq if possible
                            | # Loop unrolling - 4 elements at a time.
                            | #
                            | ##################################################################
                            | # Do not modify this portion
                            | # Function prologue.
                            | # %rdi = src, %rsi = dst, %rdx = len
0x03b:                      | ncopy:
                            | 
                            | ##################################################################
                            | # You can modify this portion
                            | # Loop header
0x03b: 6300                 | 	xorq %rax,%rax		# count = 0;
0x03d: 6222                 | 	andq %rdx,%rdx		# len <= 0?
0x03f: 710d02000000000000   | 	jle Done			# if so, goto Done:
                            | 
0x048:                      | Loop:
0x048: c0f2fcffffffffffffff | 	iaddq $-4, %rdx			# len -= 4
0x052: 756400000000000000   | 	jge L1					# start loop
0x05b: 702501000000000000   | 	jmp Rem					# Take care of remaining elements
                            | 
0x064:                      | L1:
0x064: 50a70000000000000000 | 	mrmovq (%rdi), %r10		# read val1 from src
0x06e: 50b70800000000000000 | 	mrmovq $8(%rdi), %r11	# read val2 from src + 8
0x078: 40a60000000000000000 | 	rmmovq %r10, (%rsi) 	# store val1 to dest
0x082: 62aa                 | 	andq %r10, %r10			# val1 > 0 ?
0x084: 719700000000000000   | 	jle L2
0x08d: c0f00100000000000000 | 	iaddq $1, %rax			# count++
                            | 
0x097:                      | L2:
0x097: 50a71000000000000000 | 	mrmovq $16(%rdi), %r10
0x0a1: 40b60800000000000000 | 	rmmovq %r11, $8(%rsi)
0x0ab: 62bb                 | 	andq %r11, %r11
0x0ad: 71c000000000000000   | 	jle L3
0x0b6: c0f00100000000000000 | 	iaddq $1, %rax
                            | 
0x0c0:                      | L3:
0x0c0: 50b71800000000000000 | 	mrmovq $24(%rdi), %r11
0x0ca: 40a61000000000000000 | 	rmmovq %r10, $16(%rsi)
0x0d4: 62aa                 | 	andq %r10, %r10
0x0d6: 71e900000000000000   | 	jle L4
0x0df: c0f00100000000000000 | 	iaddq $1, %rax
                            | 
0x0e9:                      | L4:
0x0e9: 40b61800000000000000 | 	rmmovq %r11, $24(%rsi)
0x0f3: 62bb                 | 	andq %r11, %r11
0x0f5: 710801000000000000   | 	jle Npos
0x0fe: c0f00100000000000000 | 	iaddq $1, %rax
                            | 
0x108:                      | Npos:					# various updates happen here
0x108: c0f72000000000000000 | 	iaddq $32, %rdi		# src++
0x112: c0f62000000000000000 | 	iaddq $32, %rsi		# dst++
0x11c: 704800000000000000   | 	jmp Loop			# if so, goto Loop:
                            | 
0x125:                      | Rem:
0x125: c0f20400000000000000 | 	iaddq $4, %rdx
0x12f: 730d02000000000000   | 	je Done
0x138: c0f2ffffffffffffffff | 	iaddq $-1, %rdx
0x142: 73cc01000000000000   | 	je JT1
0x14b: c0f2ffffffffffffffff | 	iaddq $-1, %rdx
0x155: 73a301000000000000   | 	je JT2
0x15e: c0f2ffffffffffffffff | 	iaddq $-1, %rdx
0x168: 737a01000000000000   | 	je JT3
                            | 	# addq %rdx, %rdx
                            | 	# addq %rdx, %rdx
                            | 	# addq %rdx, %rdx
                            | 	# jge JTSt(%rdx)
0x171: 700d02000000000000   | 	jmp Done
                            | 
0x17a:                      | JT3:
0x17a: 50a71000000000000000 | 	mrmovq $16(%rdi), %r10
0x184: 40a61000000000000000 | 	rmmovq %r10, $16(%rsi)
0x18e: 62aa                 | 	andq %r10, %r10
0x190: 71a301000000000000   | 	jle JT2
0x199: c0f00100000000000000 | 	iaddq $1, %rax
                            | 
0x1a3:                      | JT2:
0x1a3: 50a70800000000000000 | 	mrmovq $8(%rdi), %r10
0x1ad: 40a60800000000000000 | 	rmmovq %r10, $8(%rsi)
0x1b7: 62aa                 | 	andq %r10, %r10
0x1b9: 71cc01000000000000   | 	jle JT1
0x1c2: c0f00100000000000000 | 	iaddq $1, %rax
                            | 
0x1cc:                      | JT1:
0x1cc: 50a70000000000000000 | 	mrmovq (%rdi), %r10
0x1d6: 40a60000000000000000 | 	rmmovq %r10, (%rsi)
0x1e0: 62aa                 | 	andq %r10, %r10
0x1e2: 710d02000000000000   | 	jle Done
0x1eb: c0f00100000000000000 | 	iaddq $1, %rax
                            | 
                            | 
                            | # Jump Table
0x1f5:                      | JTSt:
0x1f5: 7a01000000000000     | 	.quad JT3
0x1fd: a301000000000000     | 	.quad JT2
0x205: cc01000000000000     | 	.quad JT1
                            | 
                            | 
                            | ##################################################################
                            | # Do not modify the following section of code
                            | # Function epilogue.
0x20d:                      | Done:
0x20d: 90                   | 	ret
                            | ##################################################################
                            | 
                            | 
                            | # Keep the following label at the end of your function
0x20e:                      | End:
                            | #/* $end ncopy-ys */
0x20e:                      | EndFun:
                            | #################################################################### 
                            | # Epilogue code for the correctness testing driver
                            | ####################################################################
                            | 
                            | # This is the correctness checking code.
                            | # It checks:
                            | #   1. %rax has 0.  Set %rax to 0xbbbb if not.
                            | #   2. The total length of the code is less than or equal to 1000.
                            | #      Set %rax to 0xcccc if not.
                            | #   3. The source data was copied to the destination.
                            | #      Set %rax to 0xdddd if not.
                            | #   4. The words just before and just after the destination region
                            | #      were not corrupted.  Set %rax to 0xeeee if not.
                            | # If all checks pass, then sets %rax to 0xaaaa
0x20e:                      | check:
                            | 	# Return value test
0x20e: 30fa0000000000000000 | 	irmovq $0,%r10
0x218: 61a0                 | 	subq %r10,%rax
0x21a: 733602000000000000   | 	je checkb
0x223: 30f0bbbb000000000000 | 	irmovq $0xbbbb,%rax  # Failed test #1
0x22d: 707403000000000000   | 	jmp cdone
0x236:                      | checkb:
                            | 	# Code length check
0x236: 30f00e02000000000000 | 	irmovq EndFun,%rax
0x240: 30f23b00000000000000 | 	irmovq StartFun,%rdx
0x24a: 6120                 | 	subq %rdx,%rax
0x24c: 30f2e803000000000000 | 	irmovq $1000,%rdx
0x256: 6102                 | 	subq %rax,%rdx
0x258: 757402000000000000   | 	jge checkm
0x261: 30f0cccc000000000000 | 	irmovq $0xcccc,%rax  # Failed test #2
0x26b: 707403000000000000   | 	jmp cdone
0x274:                      | checkm:
0x274: 30f29803000000000000 | 	irmovq dest, %rdx # Pointer to next destination location
0x27e: 30f37803000000000000 | 	irmovq src,%rbx   # Pointer to next source location
0x288: 30f70200000000000000 | 	irmovq $2,%rdi  # Count
0x292: 6277                 | 	andq %rdi,%rdi
0x294: 73f202000000000000   | 	je checkpre         # Skip check if count = 0
0x29d:                      | mcloop:
0x29d: 50020000000000000000 | 	mrmovq (%rdx),%rax
0x2a7: 50630000000000000000 | 	mrmovq (%rbx),%rsi
0x2b1: 6160                 | 	subq %rsi,%rax
0x2b3: 73cf02000000000000   | 	je  mok
0x2bc: 30f0dddd000000000000 | 	irmovq $0xdddd,%rax # Failed test #3
0x2c6: 707403000000000000   | 	jmp cdone
0x2cf:                      | mok:
0x2cf: 30f00800000000000000 | 	irmovq $8,%rax
0x2d9: 6002                 | 	addq %rax,%rdx	  # dest ++
0x2db: 6003                 | 	addq %rax,%rbx    # src++
0x2dd: 30f00100000000000000 | 	irmovq $1,%rax
0x2e7: 6107                 | 	subq %rax,%rdi    # cnt--
0x2e9: 769d02000000000000   | 	jg mcloop
0x2f2:                      | checkpre:
                            | 	# Check for corruption
0x2f2: 30f29003000000000000 | 	irmovq Predest,%rdx
0x2fc: 50020000000000000000 | 	mrmovq (%rdx), %rax  # Get word before destination
0x306: 30f2fadebc0000000000 | 	irmovq $0xbcdefa, %rdx
0x310: 6120                 | 	subq %rdx,%rax
0x312: 732e03000000000000   | 	je checkpost
0x31b: 30f0eeee000000000000 | 	irmovq $0xeeee,%rax  # Failed test #4
0x325: 707403000000000000   | 	jmp cdone
0x32e:                      | checkpost:
                            | 	# Check for corruption
0x32e: 30f2a803000000000000 | 	irmovq Postdest,%rdx
0x338: 50020000000000000000 | 	mrmovq (%rdx), %rax  # Get word after destination
0x342: 30f2bcfade0000000000 | 	irmovq $0xdefabc, %rdx
0x34c: 6120                 | 	subq %rdx,%rax
0x34e: 736a03000000000000   | 	je checkok
0x357: 30f0eeee000000000000 | 	irmovq $0xeeee,%rax # Failed test #4
0x361: 707403000000000000   | 	jmp cdone
0x36a:                      | checkok:
                            | 	# Successful checks
0x36a: 30f0aaaa000000000000 | 	irmovq $0xaaaa,%rax
0x374:                      | cdone:
0x374: 90                   | 	ret
                            | 
                            | ###############################
                            | # Source and destination blocks 
                            | ###############################
0x378:                      | 	.align 8
0x378:                      | src:
0x378: ffffffffffffffff     | 	.quad -1
0x380: feffffffffffffff     | 	.quad -2
0x388: fadebc0000000000     | 	.quad 0xbcdefa # This shouldn't get moved
                            | 
0x390:                      | 	.align 16
0x390:                      | Predest:
0x390: fadebc0000000000     | 	.quad 0xbcdefa
0x398:                      | dest:
0x398: abefcd0000000000     | 	.quad 0xcdefab
0x3a0: abefcd0000000000     | 	.quad 0xcdefab
0x3a8:                      | Postdest:
0x3a8: bcfade0000000000     | 	.quad 0xdefabc
                            | 
0x3b0:                      | .align 8
                            | # Run time stack
0x3b0: 0000000000000000     | 	.quad 0
0x3b8: 0000000000000000     | 	.quad 0
0x3c0: 0000000000000000     | 	.quad 0
0x3c8: 0000000000000000     | 	.quad 0
0x3d0: 0000000000000000     | 	.quad 0
0x3d8: 0000000000000000     | 	.quad 0
0x3e0: 0000000000000000     | 	.quad 0
0x3e8: 0000000000000000     | 	.quad 0
0x3f0: 0000000000000000     | 	.quad 0
0x3f8: 0000000000000000     | 	.quad 0
0x400: 0000000000000000     | 	.quad 0
0x408: 0000000000000000     | 	.quad 0
0x410: 0000000000000000     | 	.quad 0
0x418: 0000000000000000     | 	.quad 0
0x420: 0000000000000000     | 	.quad 0
0x428: 0000000000000000     | 	.quad 0
                            | 
0x430:                      | Stack:
